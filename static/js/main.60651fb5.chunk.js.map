{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","handleSubmit","preventDefault","onSubmit","id","Math","floor","random","text","className","type","placeholder","name","onChange","ref","onClick","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","key","isComplete","TodoList","setTodos","test","newTodos","updatedTodos","removeArr","filter","todoId","newValue","prev","item","App","ReactDOM","render","document","getElementById"],"mappings":"6OA4DeA,MA1Df,SAAkBC,GAAQ,IAAD,EACOC,mBAASD,EAAME,KAAOF,EAAME,KAAKC,MAAQ,IADhD,mBACbC,EADa,KACNC,EADM,KAGfC,EAAWC,iBAAO,MAExBC,qBAAU,WACNF,EAASG,QAAQC,WAIrB,IAAMC,EAAe,SAAAC,GACjBP,EAASO,EAAEC,OAAOV,QAGhBW,EAAe,SAAAF,GACjBA,EAAEG,iBAEFf,EAAMgB,SAAS,CACXC,GAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBC,KAAMjB,IAGVC,EAAS,KAGb,OACI,0BAAMiB,UAAU,YAAYN,SAAUF,GACjCd,EAAME,KACH,6BACI,2BACIqB,KAAK,OACLC,YAAY,mBACZrB,MAAOC,EACPqB,KAAK,OACLH,UAAU,kBACVI,SAAUf,EACVgB,IAAKrB,IAET,4BAAQsB,QAASd,EAAcQ,UAAU,oBAAzC,WAGJ,6BACI,2BACIC,KAAK,OACLC,YAAY,WACZrB,MAAOC,EACPqB,KAAK,OACLH,UAAU,aACVI,SAAUf,EACVgB,IAAKrB,IAET,4BAAQsB,QAASd,EAAcQ,UAAU,eAAzC,e,cCRLO,MAxCf,YAAgE,IAAhDC,EAA+C,EAA/CA,MAAOC,EAAwC,EAAxCA,aAAcC,EAA0B,EAA1BA,WAAYC,EAAc,EAAdA,WAAc,EACjChC,mBAAS,CAC/BgB,GAAI,KACJd,MAAO,KAHgD,mBACnDD,EADmD,KAC7CgC,EAD6C,KAc3D,OAAIhC,EAAKe,GACE,kBAAC,EAAD,CAAUf,KAAMA,EAAMc,SATZ,SAAAb,GACjB8B,EAAW/B,EAAKe,GAAId,GACpB+B,EAAQ,CACJjB,GAAI,KACJd,MAAO,QAQR2B,EAAMK,KAAI,SAACC,EAAMC,GAAP,OACb,yBACIC,IAAMD,EACNf,UAAYc,EAAKG,WAAa,oBAAsB,YAEpD,yBAAKD,IAAKF,EAAKnB,GAAIW,QAAS,kBAAMG,EAAaK,EAAKnB,MAC/CmB,EAAKf,MAEV,yBAAKC,UAAU,SACX,kBAAC,IAAD,CACIM,QAAS,kBAAMI,EAAWI,EAAKnB,KAC/BK,UAAU,gBAEd,kBAAC,IAAD,CACIM,QAAS,kBAAMM,EAAQ,CAAEjB,GAAImB,EAAKnB,GAAId,MAAOiC,EAAKf,QAClDC,UAAU,oBCgBfkB,MAlDf,WAAqB,IAAD,EACYvC,mBAAS,IADrB,mBACR6B,EADQ,KACDW,EADC,KAoChB,OACI,6BACI,0DACA,kBAAC,EAAD,CAAUzB,SApCF,SAAAoB,GACZ,GAAKA,EAAKf,OAAQ,QAAQqB,KAAKN,EAAKf,MAApC,CAIA,IAAMsB,EAAQ,CAAIP,GAAJ,mBAAaN,IAC3BW,EAASE,OA+BL,kBAAC,EAAD,CACIb,MAAOA,EACPC,aA9BS,SAAAd,GACjB,IAAI2B,EAAed,EAAMK,KAAI,SAAAC,GAIzB,OAHIA,EAAKnB,KAAOA,IACZmB,EAAKG,YAAcH,EAAKG,YAErBH,KAEXK,EAASG,IAwBDZ,WAbO,SAAAf,GACf,IAAM4B,EAAY,YAAIf,GAAOgB,QAAO,SAAAV,GAAI,OAAIA,EAAKnB,KAAOA,KAExDwB,EAASI,IAWDZ,WAtBO,SAACc,EAAQC,GACnBA,EAAS3B,OAAQ,QAAQqB,KAAKM,EAAS3B,OAI3CoB,GAAS,SAAAQ,GAAI,OAAIA,EAAKd,KAAI,SAAAe,GAAI,OAAKA,EAAKjC,KAAO8B,EAASC,EAAWE,a,MCnB7DC,MARf,WACE,OACE,yBAAK7B,UAAU,YACb,kBAAC,EAAD,QCHN8B,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.60651fb5.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\r\n\r\nfunction TodoForm(props) {\r\n    const [ input, setInput ] = useState(props.edit ? props.edit.value : '');\r\n\r\n    const inputRef = useRef(null);\r\n    \r\n    useEffect(() => {\r\n        inputRef.current.focus();\r\n    })\r\n\r\n\r\n    const handleChange = e => {\r\n        setInput(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        props.onSubmit({\r\n            id: Math.floor(Math.random() * 10000),\r\n            text: input\r\n        })\r\n\r\n        setInput('');\r\n    } \r\n\r\n    return (\r\n        <form className='todo-form' onSubmit={handleSubmit}>\r\n            {props.edit ? (\r\n                <div>\r\n                    <input \r\n                        type='text' \r\n                        placeholder='Update your item' \r\n                        value={input} \r\n                        name='text' \r\n                        className='todo-input edit'\r\n                        onChange={handleChange}\r\n                        ref={inputRef}\r\n                    />\r\n                    <button onClick={handleSubmit} className='todo-button edit'>Update</button>\r\n                </div>\r\n            ) : (\r\n                <div>\r\n                    <input \r\n                        type='text'  \r\n                        placeholder='Add todo' \r\n                        value={input} \r\n                        name='text' \r\n                        className='todo-input'\r\n                        onChange={handleChange}\r\n                        ref={inputRef}\r\n                    />\r\n                    <button onClick={handleSubmit} className='todo-button'>Add todo</button>\r\n                </div>\r\n            )}\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default TodoForm\r\n","import React, { useState } from 'react'\r\nimport TodoForm from './TodoForm';\r\nimport { RiCloseCircleLine } from 'react-icons/ri'\r\nimport { TiEdit } from 'react-icons/ti'\r\n\r\nfunction Todo({ todos, completeTodo, removeTodo, updateTodo }) {\r\n    const [ edit, setEdit ] = useState({\r\n        id: null,\r\n        value: ''\r\n    });\r\n\r\n    const submitUpdate = value => {\r\n        updateTodo(edit.id, value)\r\n        setEdit({\r\n            id: null,\r\n            value: ''\r\n        })\r\n    }\r\n\r\n    if (edit.id) {\r\n        return <TodoForm edit={edit} onSubmit={submitUpdate} />\r\n    }\r\n\r\n    return todos.map((todo, index) => (\r\n        <div \r\n            key={ index }\r\n            className={ todo.isComplete ? 'todo-row complete' : 'todo-row' }\r\n        >\r\n            <div key={todo.id} onClick={() => completeTodo(todo.id)}>\r\n                {todo.text}\r\n            </div>\r\n            <div className='icons'>\r\n                <RiCloseCircleLine \r\n                    onClick={() => removeTodo(todo.id)}\r\n                    className='delete-icon'    \r\n                />\r\n                <TiEdit \r\n                    onClick={() => setEdit({ id: todo.id, value: todo.text })}\r\n                    className='edit-icon'\r\n                />\r\n            </div> \r\n        </div>\r\n    ))\r\n}\r\n\r\nexport default Todo\r\n","import React, { useState } from 'react'\r\nimport TodoForm from './TodoForm';\r\nimport Todo from './Todo';\r\n\r\nfunction TodoList() {\r\n    const [ todos, setTodos ] = useState([]);\r\n\r\n    const addTodo = todo => {\r\n        if (!todo.text || /^\\s*$/.test(todo.text)) {\r\n            return;\r\n        }\r\n\r\n        const newTodos = [todo, ...todos];\r\n        setTodos(newTodos);\r\n    }\r\n\r\n    const completeTodo = id => {\r\n        let updatedTodos = todos.map(todo => {\r\n            if (todo.id === id) {\r\n                todo.isComplete = !todo.isComplete;\r\n            }\r\n            return todo;\r\n        });\r\n        setTodos(updatedTodos);\r\n    }\r\n\r\n    const updateTodo = (todoId, newValue) => {\r\n        if (!newValue.text || /^\\s*$/.test(newValue.text)) {\r\n            return;\r\n        }\r\n\r\n         setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item)))\r\n    }\r\n\r\n    const removeTodo = id => {\r\n        const removeArr = [...todos].filter(todo => todo.id !== id);\r\n\r\n        setTodos(removeArr);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>What's the Plan for Today?</h1>\r\n            <TodoForm onSubmit={addTodo} />\r\n            <Todo \r\n                todos={todos} \r\n                completeTodo={completeTodo} \r\n                removeTodo={removeTodo}\r\n                updateTodo={updateTodo}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList\r\n","import React from 'react';\nimport TodoList from './components/TodoList';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className='todo-app'>\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}